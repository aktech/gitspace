{"version":3,"sources":["Chart.js","Form.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["Chart","props","LabelText","bars","length","barsAppended","getAllBars","style","isOnSmallScreen","labels","map","index","key","x","y","width","height","textAnchor","formatSize","data","value","state","labelPosition","updateWindowDimensions","bind","this","window","addEventListener","removeEventListener","setState","innerWidth","innerHeight","remainingSize","dataToFill","slice","lastBar","remainingElements","yHeight","yAxisDiff","reverse","forEach","element","push","repoName","id","size","indexValue","color","concat","Math","round","Number","EPSILON","top","right","bottom","left","actualBarHeight","minHeight","max","repos","fontSize","axis","tickColor","ticks","text","fontFamily","legend","fill","className","getChartDimension","keys","indexBy","margin","getChartMargin","padding","layout","layers","colors","colorBy","borderColor","from","modifiers","axisTop","enableLabel","axisLeft","tickRotation","axisBottom","tickSize","tickPadding","legendPosition","legendOffset","format","labelSkipWidth","labelSkipHeight","labelTextColor","animate","motionStiffness","motionDamping","theme","getTheme","tooltipFormat","Component","Form","handleUsernameChange","event","username","target","initPageState","responseData","fetchPage","fetchMore","invalidUser","noRepos","unknownError","success","handleSubmit","loading","sizeMessage","preventDefault","fetchRepos","then","formatResponseData","renderChart","chartData","totalSize","url","url_with_pagination","fetch","response","json","status","name","repoSize","sort","a","b","onSubmit","type","placeholder","onChange","role","Footer","href","Sentry","dsn","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.cb4786d6.chunk.js","sourcesContent":["import React, {Component} from 'react'\nimport { ResponsiveBar } from '@nivo/bar'\n\n// These two values must be close enough for the size label to be placed correctly\nconst defaultYAxisDiff = 64\nconst barHeight = 70\nconst smallScreenBarHeight = 30\nconst smallScreenWidth = 600\nconst tickFont = \"PT Sans, serif\"\n\n\nclass Chart extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            labelPosition: null,\n            width: 0, height: 0\n        }\n        this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n    }\n\n\n    componentDidMount() {\n        this.updateWindowDimensions();\n        window.addEventListener('resize', this.updateWindowDimensions);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.updateWindowDimensions);\n    }\n\n    updateWindowDimensions() {\n        this.setState({ width: window.innerWidth, height: window.innerHeight });\n    }\n\n    getAllBars(bars) {\n        const remainingSize = this.props.data.length - bars.length\n        const dataToFill = this.props.data.slice(0, remainingSize)\n        let lastBar = bars[0]\n        let remainingElements = []\n\n        const yHeight = bars[0].height\n        const yAxisDiff = bars.length >= 2 ? bars[0].y - bars[1].y: defaultYAxisDiff\n\n        dataToFill.reverse()\n        dataToFill.forEach(element => {\n            remainingElements.push({\n                    key: element.repoName,\n                    data: {\n                        id: \"size\", value: element.size, index: 20, indexValue: element.repoName,\n                        data: {\n                            repoName: element.repoName,\n                            size: element.size\n                        }\n                    },\n                    x: 0,\n                    y: lastBar.y + yAxisDiff,\n                    width: 1,\n                    height: yHeight,\n                    color: \"#e8c1a0\"\n                }\n            )\n            lastBar = remainingElements[remainingElements.length - 1]\n        })\n        remainingElements.reverse()\n        return remainingElements.concat(bars)\n    }\n\n    formatSize(size) {\n        let humanReadableSize\n        if (size < 512) {\n            humanReadableSize = `${size} KiB`\n        } else if (size < 1024 * 1024) {\n            humanReadableSize = `${Math.round((size/1024 + Number.EPSILON) * 100) / 100} MiB`\n        } else {\n            humanReadableSize = `${Math.round((size/(1024*1024) + Number.EPSILON) * 100) / 100} GiB`\n        }\n        return humanReadableSize\n    }\n\n    LabelText = ({ bars }) => {\n        if (bars.length === 0) {\n            return <g></g>\n        }\n        const barsAppended = this.getAllBars(bars)\n        const style = {\n            \"fontSize\": this.isOnSmallScreen() ? \"0.5em\" : \"1em\",\n            \"fontFamily\": \"'Slabo 27px', serif\"\n        }\n        let labels = barsAppended.map(({ key, x, y, width, height }, index) => {\n            return (\n                <text textAnchor=\"middle\" x={width+50} y={y + height/2.1} style={style} key={index}>\n                    {this.formatSize(barsAppended[index].data.value)}\n                </text>\n            )\n        })\n        return <g>{labels}</g>\n    }\n\n    isOnSmallScreen() {\n        return this.state.width < smallScreenWidth\n    }\n\n    getChartMargin() {\n        const right = 120\n        const left = this.isOnSmallScreen() ? 100 : 200\n        return { top: 10, right: right, bottom: 200, left: left }\n    }\n\n    getChartDimension() {\n        const actualBarHeight = this.isOnSmallScreen() ?  smallScreenBarHeight : barHeight\n        const minHeight = actualBarHeight * 10\n        const height = Math.max(minHeight, this.props.repos.length * actualBarHeight)\n        return {\n            height: height,\n            width: this.state.width\n        }\n    }\n\n    getTheme() {\n        const fontSize = this.isOnSmallScreen() ? \"0.5em\" : \"1em\"\n        return {\n            axis: {\n                tickColor: \"#eee\",\n                ticks: {\n                    text: {\n                        fontSize: fontSize,\n                        fontFamily: tickFont,\n                    }\n                },\n                legend: {\n                    text: {\n                        fontSize: fontSize,\n                        fontFamily: tickFont,\n                        fill: '#165f77'\n                    }\n                }\n            }\n        };\n    }\n\n    render() {\n        return (\n            <div className=\"wrap-chart\">\n                    <div style={this.getChartDimension()} className=\"bar-chart\">\n                        <ResponsiveBar\n                            data={this.props.data}\n                            keys={[\"size\"]}\n                            indexBy=\"repoName\"\n                            margin={this.getChartMargin()}\n                            padding={0.1}\n                            layout=\"horizontal\"\n                            layers={[\"grid\", \"axes\", \"bars\", this.LabelText, \"markers\", \"legends\"]}\n                            colors={{\"scheme\": \"nivo\"}}\n                            colorBy=\"index\"\n                            borderColor={{from: 'color', modifiers: [['darker', 1.6]]}}\n                            axisTop={null}\n                            enableLabel={false}\n                            axisLeft={{\n                                tickRotation: this.isOnSmallScreen() ? -60 : 0,\n                            }}\n                            axisBottom={{\n                                tickSize: 10,\n                                tickPadding: 5,\n                                tickRotation: this.isOnSmallScreen() ? -50 : 0,\n                                legend: 'MiB',\n                                legendPosition: 'middle',\n                                legendOffset: 70,\n                                format: value => Math.round((value / 1024 + Number.EPSILON))\n                            }}\n                            labelSkipWidth={12}\n                            labelSkipHeight={12}\n                            labelTextColor={{from: 'color', modifiers: [['darker', 1.6]]}}\n                            animate={true}\n                            motionStiffness={90}\n                            motionDamping={15}\n                            theme={this.getTheme()}\n                            tooltipFormat={value => value + ' KiB'}\n                        />\n                    </div>\n             </div>\n        )\n    }\n}\n\nexport default Chart;\n","import React, {Component} from 'react';\nimport Chart from \"./Chart\";\n\nclass Form extends Component {\n\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            username: \"\",\n            renderChart: true,\n            responseData: [],\n            chartData: null,\n            repos: null,\n            loading: false,\n            success:false,\n            sizeMessage:false,\n            fetchPage: 1,\n            fetchMore: true,\n            invalidUser: false,\n            noRepos: false,\n            unknownError: false,\n            totalSize: 0\n        }\n        this.initPageState()\n    }\n\n    handleUsernameChange = (event) => {\n        this.setState({\n            username: event.target.value\n        })\n    }\n\n    async fetchRepos() {\n        if (!this.fetchMore) {\n            return\n        }\n        const url = `https://api.github.com/users/${this.state.username}/repos?per_page=100`\n        const url_with_pagination = `${url}&page=${this.fetchPage}`\n        const response = await fetch(url_with_pagination)\n        const responseData = await response.json()\n\n        if (response.status === 404) {\n            this.invalidUser = true\n            return\n        }\n\n        if (response.status !== 200) {\n            this.unknownError = true\n            this.loading = false\n            this.success = false\n            return\n        }\n\n        if (responseData.length === 0) {\n            this.fetchMore = false\n            this.loading = false\n            this.success = false\n\n            if (this.responseData.length === 0) {\n                this.noRepos = true\n            }\n            return\n        }\n\n        this.responseData = this.responseData.concat(responseData)\n        this.fetchPage = this.fetchPage + 1\n        await this.fetchRepos()\n    }\n\n    initPageState = () => {\n        this.responseData = []\n        this.fetchPage = 1\n        this.fetchMore = true\n        this.invalidUser = false\n        this.noRepos = false\n        this.unknownError = false\n        this.success = false\n    }\n\n    handleSubmit = (event) => {\n        this.setState({\n            loading: true,\n            invalidUser: false,\n            noRepos: false,\n            unknownError: false,\n            sizeMessage: false\n        });\n        event.preventDefault()\n\n        this.fetchRepos().then(() => {\n            if (this.responseData.length !== 0) {\n                this.formatResponseData()\n            } else {\n                this.setState({\n                    success: false,\n                    sizeMessage: false,\n                    invalidUser: this.invalidUser,\n                    unknownError: this.unknownError,\n                    noRepos: this.noRepos\n                })\n            }\n            this.initPageState()\n            this.setState({ loading: false });\n        })\n\n    }\n\n    formatResponseData() {\n        let chartData = [];\n        let repos = []\n        let totalSize = 0\n        this.responseData.forEach(element => {\n            repos.push(element.name)\n            totalSize += element.size\n            let repoSize = element.size\n            chartData.push({\n                \"repoName\": element.name,\n                \"size\": repoSize,\n            })\n        });\n\n        chartData.sort(function(a, b) {\n            return a.size - b.size;\n        });\n\n        this.setState({\n            chartData: chartData,\n            repos: repos,\n            totalSize: Math.round((totalSize / (1024*1024) + Number.EPSILON) * 100) / 100,\n            success: true,\n            sizeMessage: true,\n            invalidUser: false,\n            unknownError: false,\n            noRepos: false\n        })\n    }\n\n\n    render() {\n        return (\n            <div>\n            <form onSubmit={this.handleSubmit} className=\"username-input-form\">\n                <input type=\"text\" className=\"username-input\" placeholder=\"Github Username\" value={this.state.username}\n                       onChange={this.handleUsernameChange}/>\n            </form>\n                {this.state.loading?\n                    <div className=\"spinner-border\" role=\"status\">\n                    </div> : null\n                }\n                {this.state.invalidUser?\n                    <div className=\"alert alert-warning message\" role=\"alert\">\n                        You sure that's a Github username?\n                    </div> : null\n                }\n                {this.state.noRepos?\n                    <div className=\"alert alert-warning message\" role=\"alert\">\n                        This person doesn't seems to have any repositories, what are you trying to see the space for?\n                    </div> : null\n                }\n                {this.state.unknownError?\n                    <div className=\"alert alert-danger message\" role=\"alert\">\n                        Something went wrong!\n                    </div> : null\n                }\n                {this.state.sizeMessage ?\n                    <div className=\"alert alert-info message\">Total space occupied: {this.state.totalSize} GiB</div> : null\n                }\n                {this.state.success ?\n                    <Chart data={this.state.chartData} repos={this.state.repos}/> : null\n                }\n\n            </div>\n        );\n    }\n\n}\n\nexport default Form;\n","import React, {Component} from 'react';\n\nclass Footer extends Component {\n    render() {\n        return (\n            <footer>\n                <p>Source code at <a className=\"footer-text\" href=\"https://github.com/aktech/gitspace\">Github</a> • Made by <a className=\"footer-text\" href=\"https://iamit.in/\">Amit</a></p>\n            </footer>\n        )\n    }\n}\n\nexport default Footer;\n","import React, {Component} from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as Sentry from '@sentry/browser';\nimport Form from \"./Form\";\nimport Footer from \"./Footer\";\n\nSentry.init({dsn: \"https://f624cc79b0aa4acc97959177183f0d11@sentry.io/4400890\"});\n\nclass App extends Component {\n    render() {\n        return (\n            <div className=\"App\">\n                <h1 className=\"site-title\">Gitspace</h1>\n                <h2 className=\"desc\">Know the space occupied by your public repositories.</h2>\n                <Form/>\n                <Footer/>\n            </div>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}